#!/opt/python/bin/python2.7

import os
import sys
import subprocess
from pprint import pprint

class GPUinfo:
    """ base class """
    def __init__(self, argv):
        self.usage_command = os.path.basename(argv[0])
        self.args          = argv[1:]
        self.space         = '    '
        self.specinfo      = ''
        self.nameinfo      = 'checks for available GPU ids'
        self.descinfo      = 'outputs free GPU ids as a comma-separated string\n' + \
                             '%sNUM - number of GPUs to use for a job' % self.space
        self.cmd           = '/usr/bin/nvidia-smi'
        self.utilization   = 7  # utilization field in nvidia-smi output (without "| /" characters)
        self.numgpu        = 1
        self.numgpuMax     = 8   # max gpu count on a node
        self.freeids       = []  # list of free gpus
        self.env           = 'CUDA_VISIBLE_DEVICES'  # environ variable to set 

        self.parseArgs()

    def parseArgs(self):
        """ check input arguments, and print usage"""
        if len(self.args) == 0:
            return
        if self.args[0] in ('-h', '--help', 'help'):
            self.help()
        # first argument is number of desired gpus
        numgpu = int(self.args[0])
        if numgpu > 8 :
            numgpu = 8
        self.numgpu = numgpu

    def help(self):
        print "\nNAME\n%s%s - %s." % (self.space, self.usage_command, self.nameinfo)
        print '\nSYNOPSIS\n', self.space + self.usage_command, "NUM", "[-h|--help|help]"
        print '\nDESCRIPTION\n', self.space +  self.descinfo
        print self.specinfo
        sys.exit(0)

    def runTest(self):
        """ test output """
        pprint (self.__dict__)

    def nvsmi(self):
        """find output of nvidia-smi"""
        __name__ = "nvsmi"

        cmd = "%s | grep %%" % self.cmd
        info, err = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
        if err: 
            print "%s returned error: %s" % (self.cmd,err)

        info = info.translate(None, "|/") # remove | and /
        lines = info.split('\n')[:-1]  # split into lines, rm last new line

        return lines

    def findFree(self, lines):
        """ find list of free GPU ids from a given output"""
        for i in range (len(lines)):
            parts = lines[i].split()
            util = int(parts[self.utilization][:-1])
            if util < 1:
                self.freeids.append(i)
        return 

    def setVisible(self):
        strVis = str(self.freeids[0:self.numgpu]).strip('[]')
        strVis = strVis.replace(' ','')
        print  strVis

        #os.environ[self.env] = a

    def run(self):
        lines = self.nvsmi()  # run nvidia-smi command
        self.findFree(lines)  # find free gpu ids
        self.setVisible()

### Main ###
app = GPUinfo(sys.argv)
app.run()
